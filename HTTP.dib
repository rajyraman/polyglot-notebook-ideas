#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"HTTP","name":"http"}]}}

#!csharp

#r "nuget:Microsoft.DotNet.Interactive.HttpRequest, *-*"

#!markdown

### Add Kernel Event Handler to process HTTP response

#!csharp

using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.Commands;
using Microsoft.DotNet.Interactive.Events;
using Microsoft.DotNet.Interactive.Formatting;
using System.Linq;
using System.Text.Json;
var responseBody = "";
var httpKernelEvents = new List<KernelEvent>();
Kernel.Root.KernelEvents.Subscribe(e =>
{
    if(e.Command.TargetKernelName == "http")
        httpKernelEvents.Add(e);
    if (e is DisplayedValueProduced de && e.Command.TargetKernelName == "http")
    {
        var dvp = de as DisplayedValueProduced;
        var jsonResponse = dvp.FormattedValues.First(x=>x.MimeType == "application/json").Value.ToString();
        var content = JsonDocument.Parse(jsonResponse).RootElement.GetProperty("Content").ToString();
        var rawResponse = JsonDocument.Parse(content).RootElement.GetProperty("Raw").ToString();
        responseBody = JsonSerializer.Serialize(JsonSerializer.Deserialize<object>(rawResponse), new JsonSerializerOptions { WriteIndented = true });
        if(dvp.Command is SubmitCode sc)
        {
            Kernel.Root.SendAsync(new SendEditableCode("markdown", $"### {sc.Code.Split("\n").First()}{Environment.NewLine}```json{Environment.NewLine}{responseBody}"));
        }
        else 
        {
            Kernel.Root.SendAsync(new SendEditableCode("markdown", $"### Response{Environment.NewLine}```json{Environment.NewLine}{responseBody}"));
        }
    }
});

#!markdown

### Get Bearer Token from Azure CLI

#!pwsh

#!set --name url --value @input:"Please enter the Dataverse Environment URL"

#!pwsh

$token="Bearer $(az account get-access-token --resource=$url --query accessToken --output tsv)"

#!markdown

### Share Token and Url with HTTP Kernel

#!http

#!set --name token --value @pwsh:token --mime-type text/plain
#!set --name url --value @pwsh:url --mime-type text/plain

#!markdown

### Execute WhoAmI request

#!http

GET {{url}}/api/data/v9.2/systemusers?$select=fullname&$top=5
Accept: application/json
Authorization: {{token}}
